*airline.txt*  Lean and mean status/tabline that's light as air
*airline*
                   _                       _      _ _                        ~
            __   _(_)_ __ ___         __ _(_)_ __| (_)_ __   ___             ~
            \ \ / / | '_ ` _ \ _____ / _` | | '__| | | '_ \ / _ \            ~
             \ V /| | | | | | |_____| (_| | | |  | | | | | |  __/            ~
              \_/ |_|_| |_| |_|      \__,_|_|_|  |_|_|_| |_|\___|            ~
                                                                             ~
==============================================================================
CONTENTS                                                  *airline-contents*

   01. Intro ............................................... |airline-intro|
   02. Features ......................................... |airline-features|
   03. Name ................................................. |airline-name|
   04. Configuration ............................... |airline-configuration|
   05. Commands ......................................... |airline-commands|
   06. Autocommands ................................. |airline-autocommands|
   07. Customization ............................... |airline-customization|
   08. Extensions ..................................... |airline-extensions|
   09. Advanced Customization ............. |airline-advanced-customization|
   10. Funcrefs ......................................... |airline-funcrefs|
   11. Pipeline ......................................... |airline-pipeline|
   12. Writing Extensions ..................... |airline-writing-extensions|
   13. Writing Themes ..................................... |airline-themes|
   14. Troubleshooting ........................... |airline-troubleshooting|
   15. Contributions ............................... |airline-contributions|
   16. License ........................................... |airline-license|

==============================================================================
INTRODUCTION                                                 *airline-intro*

vim-airline is a fast and lightweight alternative to powerline, written
in 100% vimscript with no outside dependencies.

==============================================================================
FEATURES                                                  *airline-features*

*  tiny core written with extensibility in mind.
*  integrates with many popular plugins.
*  looks good with regular fonts, and provides configuration points so you
   can use unicode or powerline symbols.
*  optimized for speed; it loads in under a millisecond.
*  fully customizable; if you know a little 'statusline' syntax you can
   tweak it to your needs.
*  extremely easy to write themes.

==============================================================================
NAME                                                          *airline-name*

Where did the name come from?

I wrote this on an airplane, and since it's light as air it turned out to be a
good name :-)

==============================================================================
CONFIGURATION                                        *airline-configuration*

There are a couple configuration values available (shown with their default
values):

* the separator used on the left side >
  let g:airline_left_sep='>'
<
* the separator used on the right side >
  let g:airline_right_sep='<'
<
* enable modified detection >
  let g:airline_detect_modified=1

* enable paste detection >
  let g:airline_detect_paste=1
<
* enable crypt detection >
  let g:airline_detect_crypt=1
<
* enable iminsert detection >
  let g:airline_detect_iminsert=0
<
* determine whether inactive windows should have the left section collapsed to
  only the filename of that buffer.  >
  let g:airline_inactive_collapse=1
<
* themes are automatically selected based on the matching colorscheme. this
  can be overridden by defining a value. >
  let g:airline_theme='dark'
<
  Note: Only the dark theme is distributed with vim-airline. For more themes,
  checkout the vim-airline-themes repository
  (github.com/vim-airline/vim-airline-themes)

* if you want to patch the airline theme before it gets applied, you can
  supply the name of a function where you can modify the palette. >
  let g:airline_theme_patch_func = 'AirlineThemePatch'
  function! AirlineThemePatch(palette)
    if g:airline_theme == 'badwolf'
      for colors in values(a:palette.inactive)
        let colors[3] = 245
      endfor
    endif
  endfunction
<
* enable/disable automatic population of the `g:airline_symbols` dictionary
  with powerline symbols. >
  let g:airline_powerline_fonts=0
<
* define the set of text to display for each mode.  >
  let g:airline_mode_map = {} " see source for the defaults

  " or copy paste the following into your vimrc for shortform text
  let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
<
* define the set of filename match queries which excludes a window from having
  its statusline modified >
  let g:airline_exclude_filenames = [] " see source for current list
<
* define the set of filetypes which are excluded from having its window
  statusline modified >
  let g:airline_exclude_filetypes = [] " see source for current list
<
* defines whether the preview window should be excluded from have its window
  statusline modified (may help with plugins which use the preview window
  heavily) >
  let g:airline_exclude_preview = 0
<
* disable the Airline customization for selective windows (this is a
  window-local variable so you can disable it for only some windows) >
  let w:airline_disabled = 1
<

==============================================================================
COMMANDS                                                  *airline-commands*

:AirlineTheme {theme-name}                                   *:AirlineTheme*
  Displays or changes the current theme.

:AirlineToggleWhitespace                          *:AirlineToggleWhitespace*
  Toggles whitespace detection.

:AirlineToggle                                              *:AirlineToggle*
  Toggles between the standard 'statusline' and airline.

:AirlineRefresh                                            *:AirlineRefresh*
  Refreshes all highlight groups and redraws the statusline.

==============================================================================
AUTOCOMMANDS                                          *airline-autocommands*

Airline comes with some user-defined autocommands.

|AirlineAfterInit|     after plugin is initialized, but before the statusline
                    is replaced
|AirlineToggledOn|    after airline is activated and replaced the statusline
|AirlineToggledOff|   after airline is deactivated and the statusline is
                    restored to the original

==============================================================================
CUSTOMIZATION                                        *airline-customization*

The following are some unicode symbols for customizing the left/right
separators, as well as the powerline font glyphs.

Note: You must define the dictionary first before setting values. Also, it's a
good idea to check whether it exists as to avoid accidentally overwriting
its contents. >
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " unicode symbols
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.crypt = '🔒'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.notexists = '∄'
  let g:airline_symbols.whitespace = 'Ξ'

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''

  " old vim-powerline symbols
  let g:airline_left_sep = '⮀'
  let g:airline_left_alt_sep = '⮁'
  let g:airline_right_sep = '⮂'
  let g:airline_right_alt_sep = '⮃'
  let g:airline_symbols.branch = '⭠'
  let g:airline_symbols.readonly = '⭤'
  let g:airline_symbols.linenr = '⭡'
<

For more intricate customizations, you can replace the predefined sections
with the usual statusline syntax.

Note: If you define any section variables it will replace the default values
entirely.  If you want to disable only certain parts of a section you can try
using variables defined in the |airline-configuration| or |airline-extensions|
section.
>
  variable names                default contents
  ----------------------------------------------------------------------------
  let g:airline_section_a       (mode, crypt, paste, iminsert)
  let g:airline_section_b       (hunks, branch)
  let g:airline_section_c       (bufferline or filename)
  let g:airline_section_gutter  (readonly, csv)
  let g:airline_section_x       (tagbar, filetype, virtualenv)
  let g:airline_section_y       (fileencoding, fileformat)
  let g:airline_section_z       (percentage, line number, column number)
  let g:airline_section_error   (ycm_error_count, syntastic, eclim)
  let g:airline_section_warning (ycm_warning_count, whitespace)

  " here is an example of how you could replace the branch indicator with
  " the current working directory, followed by the filename.
  let g:airline_section_b = '%{getcwd()}'
  let g:airline_section_c = '%t'
<
==============================================================================
EXTENSIONS                                              *airline-extensions*

Most extensions are enabled by default and lazily loaded when the
corresponding plugin (if any) is detected.

By default, airline will attempt to load any extension it can find in the
'runtimepath'.  On some systems this can result in an undesirable startup
cost.  You can disable the check with the following flag. >
  let g:airline#extensions#disable_rtp_load = 1
<
  Note: Third party plugins that rely on this behavior will be affected. You
  will need to manually load them.

Alternatively, if you want a minimalistic setup and would rather opt-in which
extensions get loaded instead of disabling each individually, you can declare
the following list variable: >
  " an empty list disables all extensions
  let g:airline_extensions = []

  " or only load what you want
  let g:airline_extensions = ['branch', 'tabline']
<
-------------------------------------                      *airline-default*
The default extension understands all of the `g:` variables in the
|airline-configuration| section, however it also has some more fine-tuned
configuration values that you can use.

* control which sections get truncated and at what width. >
  let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 79,
      \ 'x': 60,
      \ 'y': 88,
      \ 'z': 45,
      \ 'warning': 80,
      \ 'error': 80,
      \ }

  " Note: set to an empty dictionary to disable truncation.
  let g:airline#extensions#default#section_truncate_width = {}
<
* configure the layout of the sections by specifying an array of two arrays
  (first array is the left side, second array is the right side). >
  let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'y', 'z', 'error', 'warning' ]
      \ ]
<
* configure the layout to not use %(%) grouping items in the statusline.
  Try setting this to zero, if you notice bleeding color artifacts >
  let airline#extensions#default#section_use_groupitems = 1
<
-------------------------------------                     *airline-quickfix*
The quickfix extension is a simple built-in extension which determines
whether the buffer is a quickfix or location list buffer, and adjusts the
title accordingly.

* configure the title text for quickfix buffers >
  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
<
* configure the title text for location list buffers >
  let g:airline#extensions#quickfix#location_text = 'Location'
<

-------------------------------------                   *airline-bufferline*
vim-bufferline <https://github.com/bling/vim-bufferline>

* enable/disable bufferline integration >
  let g:airline#extensions#bufferline#enabled = 1
<
* determine whether bufferline will overwrite customization variables >
  let g:airline#extensions#bufferline#overwrite_variables = 1
<
-------------------------------------                       *airline-branch*
fugitive.vim <https://github.com/tpope/vim-fugitive>
lawrencium   <https://bitbucket.org/ludovicchabant/vim-lawrencium>
vcscommand   <http://www.vim.org/scripts/script.php?script_id=90>

* enable/disable fugitive/lawrencium integration >
  let g:airline#extensions#branch#enabled = 1
<
* change the text for when no branch is detected >
  let g:airline#extensions#branch#empty_message = ''
<
* define the order in which the branches of different vcs systems will be
  displayed on the statusline (currently only for fugitive and lawrencium) >
  let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]
<
* use vcscommand.vim if available >
  let g:airline#extensions#branch#use_vcscommand = 0
<
* truncate long branch names to a fixed length >
  let g:airline#extensions#branch#displayed_head_limit = 10
<
* customize formatting of branch name >
  " default value leaves the name unmodifed
  let g:airline#extensions#branch#format = 0

  " to only show the tail, e.g. a branch 'feature/foo' becomes 'foo', use
  let g:airline#extensions#branch#format = 1

  " to truncate all path sections but the last one, e.g. a branch
  " 'foo/bar/baz' becomes 'f/b/baz', use
  let g:airline#extensions#branch#format = 2

  " if a string is provided, it should be the name of a function that
  " takes a string and returns the desired value
  let g:airline#extensions#branch#format = 'CustomBranchName'
  function! CustomBranchName(name)
    return '[' . a:name . ']'
  endfunction
<
-------------------------------------                    *airline-syntastic*
syntastic <https://github.com/scrooloose/syntastic>

* enable/disable syntastic integration >
  let g:airline#extensions#syntastic#enabled = 1
<
-------------------------------------                       *airline-tagbar*
tagbar <https://github.com/majutsushi/tagbar>

* enable/disable tagbar integration >
  let g:airline#extensions#tagbar#enabled = 1
<
* change how tags are displayed (:help tagbar-statusline) >
  let g:airline#extensions#tagbar#flags = ''  (default)
  let g:airline#extensions#tagbar#flags = 'f'
  let g:airline#extensions#tagbar#flags = 's'
  let g:airline#extensions#tagbar#flags = 'p'
<
-------------------------------------                          *airline-csv*
csv.vim <https://github.com/chrisbra/csv.vim>

* enable/disable csv integration for displaying the current column. >
  let g:airline#extensions#csv#enabled = 1
<
* change how columns are displayed. >
  let g:airline#extensions#csv#column_display = 'Number' (default)
  let g:airline#extensions#csv#column_display = 'Name'
<
-------------------------------------                        *airline-hunks*
vim-gitgutter <https://github.com/airblade/vim-gitgutter>
vim-signify <https://github.com/mhinz/vim-signify>
changesPlugin <https://github.com/chrisbra/changesPlugin>
quickfixsigns <https://github.com/tomtom/quickfixsigns_vim>

* enable/disable showing a summary of changed hunks under source control. >
  let g:airline#extensions#hunks#enabled = 1
<
* enable/disable showing only non-zero hunks. >
  let g:airline#extensions#hunks#non_zero_only = 0
<
* set hunk count symbols. >
  let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']
<
-------------------------------------                        *airline-ctrlp*
ctrlp <https://github.com/kien/ctrlp.vim>

* configure which mode colors should ctrlp window use (takes effect
  only if the active airline theme doesn't define ctrlp colors) >
  let g:airline#extensions#ctrlp#color_template = 'insert' (default)
  let g:airline#extensions#ctrlp#color_template = 'normal'
  let g:airline#extensions#ctrlp#color_template = 'visual'
  let g:airline#extensions#ctrlp#color_template = 'replace'
<

* configure whether to show the previous and next modes (mru, buffer, etc...)
>
 let g:airline#extensions#ctrlp#show_adjacent_modes = 1
<
-------------------------------------                   *airline-virtualenv*
virtualenv <https://github.com/jmcantrell/vim-virtualenv>

* enable/disable virtualenv integration >
  let g:airline#extensions#virtualenv#enabled = 1
<
-------------------------------------                        *airline-eclim*
eclim <https://eclim.org>

* enable/disable eclim integration, which works well with the
  |airline-syntastic| extension. >
  let g:airline#extensions#eclim#enabled = 1

-------------------------------------                    *airline-wordcount*
* enable/disable word counting. >
  let g:airline#extensions#wordcount#enabled = 1
<
* regex of filetypes to enable word counting. >
  " the default value matches filetypes typically used for documentation
  " such as markdown and help files.
  let g:airline#extensions#wordcount#filetypes = ...
  (default: markdown,rst,org,help,text)

* defines the name of a formatter for word count will be displayed: >
  " The default will try to guess LC_NUMERIC and format number accordingly
  " e.g. 1,042 in English and 1.042 in German locale
  let g:airline#extensions#wordcount#formatter = 'default'

  " here is how you can define a 'foo' formatter:
  " create a file in the dir autoload/airline/extensions/wordcount/formatters/
  " called foo.vim
  " this example needs at least Vim > 7.4.1042
  function! airline#extensions#wordcount#formatters#foo#format()
    return (wordcount()['words'] == 0 ? 'NONE' :
        \ wordcount()['words'] > 100 ? 'okay' : 'not enough')
  endfunction
  let g:airline#extensions#wordline#formatter = 'foo'
<
-------------------------------------                   *airline-whitespace*
* enable/disable detection of whitespace errors. >
  let g:airline#extensions#whitespace#enabled = 1
<
* customize the type of mixed indent checking to perform. >
  " must be all spaces or all tabs before the first non-whitespace character
  let g:airline#extensions#whitespace#mixed_indent_algo = 0 (default)

  " certain number of spaces are allowed after tabs, but not in between
  " this algorithm works well for /** */ style comments in a tab-indented file
  let g:airline#extensions#whitespace#mixed_indent_algo = 1

  " spaces are allowed after tabs, but not in between
  " this algorithm works well with programming styles that use tabs for
  " indentation and spaces for alignment
  let g:airline#extensions#whitespace#mixed_indent_algo = 2
<
* customize the whitespace symbol. >
  let g:airline#extensions#whitespace#symbol = '!'
<
* configure which whitespace checks to enable. >
  " indent: mixed indent within a line
  " long:   overlong lines
  " trailing: trailing whitespace
  " mixed-indent-file: different indentation in different lines
  let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing', 'long', 'mixed-indent-file' ]
<
* configure the maximum number of lines where whitespace checking is enabled. >
  let g:airline#extensions#whitespace#max_lines = 20000
<
* configure whether a message should be displayed. >
  let g:airline#extensions#whitespace#show_message = 1
<
* configure the formatting of the warning messages. >
  let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
  let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'
  let g:airline#extensions#whitespace#long_format = 'long[%s]'
  let g:airline#extensions#whitespace#mixed_indent_file_format = 'mix-indent-file[%s]'

* configure custom trailing whitespace regexp rule >
  let g:airline#extensions#whitespace#trailing_regexp = '\s$'
<
-------------------------------------                      *airline-tabline*
* enable/disable enhanced tabline. >
  let g:airline#extensions#tabline#enabled = 0
<
* enable/disable displaying buffers with a single tab. >
  let g:airline#extensions#tabline#show_buffers = 1
<
* enable/disable displaying tabs, regardless of number. >
  let g:airline#extensions#tabline#show_tabs = 1
<
* configure filename match rules to exclude from the tabline. >
  let g:airline#extensions#tabline#excludes = []

* enable/disable display preview window buffer in the tabline. >
  let g:airline#extensions#tabline#exclude_preview = 1

* configure how numbers are displayed in tab mode. >
  let g:airline#extensions#tabline#tab_nr_type = 0 " # of splits (default)
  let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
  let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
<
* enable/disable displaying tab number in tabs mode. >
  let g:airline#extensions#tabline#show_tab_nr = 1

* enable/disable displaying tab type (far right) >
  let g:airline#extensions#tabline#show_tab_type = 1

* enable/disable displaying index of the buffer.

  Note: If you're using ctrlspace the tabline shows your tabs on the right and
  buffer on the left. Also none of the tabline switches is currently
  supported!

  When enabled, numbers will be displayed in the tabline and mappings will be
  exposed to allow you to select a buffer directly.  Up to 9 mappings will be
  exposed. >

  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
  nmap <leader>- <Plug>AirlineSelectPrevTab
  nmap <leader>+ <Plug>AirlineSelectNextTab

  Note: Mappings will be ignored within a NERDTree buffer.

  Note: In buffer_idx_mode these mappings won't change the
  current tab, but switch to the buffer visible in that tab.
  Use |gt| for switching tabs.
  In tabmode, those mappings will switch to the specified tab.

* defines the name of a formatter for how buffer names are displayed. >
  let g:airline#extensions#tabline#formatter = 'default'

  " here is how you can define a 'foo' formatter:
  " create a file in the dir autoload/airline/extensions/tabline/formatters/
  " called foo.vim
  function! airline#extensions#tabline#formatters#foo#format(bufnr, buffers)
    return fnamemodify(bufname(a:bufnr), ':t')
  endfunction
  let g:airline#extensions#tabline#formatter = 'foo'
<

  Note: the following variables are only used by the 'default' formatter.
  When no disambiguation is needed, both 'unique_tail_improved' and
  'unique_tail' delegate formatting to 'default', so these variables also
  control rendering of unique filenames when using these formatters.

    * configure whether buffer numbers should be shown. >
      let g:airline#extensions#tabline#buffer_nr_show = 0
<
    * configure how buffer numbers should be formatted with |printf|. >
      let g:airline#extensions#tabline#buffer_nr_format = '%s: '
<
    * configure the formatting of filenames (see |filename-modifiers|). >
      let g:airline#extensions#tabline#fnamemod = ':p:.'
<
    * configure collapsing parent directories in buffer name. >
      let g:airline#extensions#tabline#fnamecollapse = 1
<
    * configure truncating non-active buffer names to specified length. >
      let g:airline#extensions#tabline#fnametruncate = 0

  " The `unique_tail` algorithm will display the tail of the filename, unless
  " there is another file of the same name, in which it will display it along
  " with the containing parent directory.
  let g:airline#extensions#tabline#formatter = 'unique_tail'

  " The `unique_tail_improved` - another algorithm, that will smartly uniquify
  " buffers names with similar filename, suppressing common parts of paths.
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
<
* configure the minimum number of buffers needed to show the tabline. >
  let g:airline#extensions#tabline#buffer_min_count = 0
<
  Note: this setting only applies to a single tab and when `show_buffers` is
  true.

* configure the minimum number of tabs needed to show the tabline. >
  let g:airline#extensions#tabline#tab_min_count = 0
<
  Note: this setting only applies when `show_buffers` is false.

* configure separators for the tabline only. >
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''
  let g:airline#extensions#tabline#right_sep = ''
  let g:airline#extensions#tabline#right_alt_sep = ''

* configure whether close button should be shown: >
  let g:airline#extensions#tabline#show_close_button = 1

* configure symbol used to represent close button >
  let g:airline#extensions#tabline#close_symbol = 'X'

* configure pattern to be ignored on BufAdd autocommand >
  " fixes unneccessary redraw, when e.g. opening Gundo window
  let airline#extensions#tabline#ignore_bufadd_pat =
            \ '\c\vgundo|undotree|vimfiler|tagbar|nerd_tree'

<
Note: Enabling this extension will modify 'showtabline' and 'guioptions'.

-------------------------------------                     *airline-tmuxline*
tmuxline <https://github.com/edkolev/tmuxline.vim>

* enable/disable tmuxline integration >
  let g:airline#extensions#tmuxline#enabled = 0
<
* configure which mode colors should be used in tmux statusline >
  let airline#extensions#tmuxline#color_template = 'normal' (default)
  let airline#extensions#tmuxline#color_template = 'insert'
  let airline#extensions#tmuxline#color_template = 'visual'
  let airline#extensions#tmuxline#color_template = 'replace'
<
* if specified, setting this option will trigger writing to the file whenever the
  airline theme is applied, i.e. when :AirlineTheme is executed and on vim
  startup >
  airline#extensions#tmuxline#snapshot_file = "~/.tmux-statusline-colors.conf"
<
-------------------------------------                   *airline-promptline*
promptline <https://github.com/edkolev/promptline.vim>

* configure the path to the snapshot .sh file. Mandatory option. The created
  file should be sourced by the shell on login >
  " in .vimrc
  airline#extensions#promptline#snapshot_file = "~/.shell_prompt.sh"

  " in .bashrc/.zshrc
  [ -f ~/.shell_prompt.sh ] && source ~/.shell_prompt.sh
<
* enable/disable promptline integration >
  let g:airline#extensions#promptline#enabled = 0
<
* configure which mode colors should be used in prompt >
  let airline#extensions#promptline#color_template = 'normal' (default)
  let airline#extensions#promptline#color_template = 'insert'
  let airline#extensions#promptline#color_template = 'visual'
  let airline#extensions#promptline#color_template = 'replace'
<
-------------------------------------                      *airline-nrrwrgn*
NrrwRgn <https://github.com/chrisbra/NrrwRgn>

* enable/disable NrrwRgn integration >
  let g:airline#extensions#nrrwrgn#enabled = 1

-------------------------------------                     *airline-capslock*
vim-capslock <https://github.com/tpope/vim-capslock>

* enable/disable vim-capslock integration >
  let g:airline#extensions#capslock#enabled = 1

-------------------------------------                   *airline-windowswap*
vim-windowswap <https://github.com/wesQ3/vim-windowswap>

* enable/disable vim-windowswap integration >
  let g:airline#extensions#windowswap#enabled = 1

* set marked window indicator string >
  let g:airline#extensions#windowswap#indicator_text = 'WS'
<
-------------------------------------                        *airline-taboo*
taboo.vim <https://github.com/gcmt/taboo.vim>

* enable/disable taboo.vim integration >
  let g:airline#extensions#taboo#enabled = 1
<
-------------------------------------                    *airline-ctrlspace*
vim-ctrlspace <https://github.com/szw/vim-ctrlspace>

* enable/disable vim-ctrlspace integration >
  let g:airline#extensions#ctrlspace#enabled = 1

  To make the vim-ctrlspace integration work you will need to make the
  ctrlspace statusline function call the correct airline function. Therefore
  add the following line into your .vimrc:

  let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"
<
-------------------------------------                    *airline-ycm*
YouCompleteMe <https://github.com/Valloric/YouCompleteMe>

Shows number of errors and warnings in the current file detected by YCM.

* enable/disable YCM integration >
  let g:airline#extensions#ycm#enabled = 1

* set error count prefix >
  let g:airline#extensions#ycm#error_symbol = 'E:'

* set warning count prefix >
  let g:airline#extensions#ycm#warning_symbol = 'W:'
<
==============================================================================
ADVANCED CUSTOMIZATION                      *airline-advanced-customization*

The defaults will accommodate the mass majority of users with minimal
configuration. However, if you want to reposition sections or contents you can
do so with built-in helper functions, which makes it possible to create
sections in a more declarative style.

-------------------------------------                        *airline-parts*
A part is something that contains metadata that eventually gets rendered into
the statusline. You can define parts that contain constant strings or
functions. Defining parts is needed if you want to use features like automatic
insertion of separators or hiding based on window width.

For example, this is how you would define a part function: >
  call airline#parts#define_function('foo', 'GetFooText')
<
Here is how you would define a part that is visible only if the window width
greater than a minimum width. >
  call airline#parts#define_minwidth('foo', 50)
<
Parts can be configured to be visible conditionally. >
  call airline#parts#define_condition('foo', 'getcwd() =~ "work_dir"')
<

Now add part "foo" to section section airline_section_y: >
  let g:airline_section_y = airline#section#create_right(['ffenc','foo'])
<
Note: Part definitions are combinative; e.g. the two examples above modify the
same `foo` part.

Note: Look at the source code and tests for the full API.

-------------------------------------             *airline-predefined-parts*
Before is a list of parts that are predefined by vim-airline.

* `mode`           displays the current mode
* `iminsert`       displays the current insert method
* `paste`          displays the paste indicator
* `crypt`          displays the crypted indicator
* `filetype`       displays the file type
* `readonly`       displays the read only indicator
* `file`           displays the filename and modified indicator
* `ffenc`          displays the file format and encoding

And the following are defined for their respective extensions:

`hunks`, `branch`, `tagbar`, `syntastic`, `whitespace`

-------------------------------------                      *airline-accents*
Accents can be defined on any part, like so: >
  call airline#parts#define_accent('foo', 'red')
<
This will override the colors of that part by using what is defined in that
particular accent. In the above example, the `red` accent is used, which means
regardless of which section the part is used in, it will have red foreground
colors instead of the section's default foreground color.

The following accents are defined by default. Themes can define their variants
of the colors, but defaults will be provided if missing. >
  bold, italic, red, green, blue, yellow, orange, purple
<
The defaults configure the mode and line number parts to be bold, and the
readonly part to be red.

-------------------------------------                     *airline-sections*
Once a part is defined, you can use helper functions to generate the
statuslines for each section. For example, to use the part above, we could
define a section like this: >
  function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'foo'])
    let g:airline_section_b = airline#section#create_left(['ffenc','file'])
    let g:airline_section_c = airline#section#create(['%{getcwd()}'])
  endfunction
  autocmd User AirlineAfterInit call AirlineInit()
<
This will create a section with the `mode`, followed by a space, and our `foo`
part in section `a`. Section `b` will have two parts with a left-side
separator. And section `c` will contain the current path. You may notice that
the space and cwd are not defined parts. For convenience, if a part of that
key does not exist, it will be inserted as is. The unit tests will be a good
resource for possibilities.

Note: The use of |VimEnter| is important, because most extensions are lazily
loaded, so we must give them a chance to define their parts before we can use
them.

Note: The `airline#section#create` function and friends will do its best to
create a section with the appropriate separators, but it only works for
function and text parts. Special 'statusline' items like %f or raw/undefined
parts will not work as it is not possible to inspect their widths/contents
before rendering to the statusline.

==============================================================================
FUNCREFS                                                  *airline-funcrefs*

vim-airline internally uses funcrefs to integrate with third party plugins,
and you can tap into this functionality to extend it for you needs. This is
the most powerful way to customize the statusline, and sometimes it may be
easier to go this route than the above methods.

Every section can have two values. The default value is the global `g:`
variable which is used in the absence of a `w:` value. This makes it very easy
to override only certain parts of the statusline by only defining window-local
variables for a subset of all sections.

-------------------------------------                  *add_statusline_func*
The following is an example of how you can extend vim-airline to support a
new plugin. >
  function! MyPlugin(...)
    if &filetype == 'MyPluginFileType'
      let w:airline_section_a = 'MyPlugin'
      let w:airline_section_b = '%f'
      let w:airline_section_c = '%{MyPlugin#function()}'
      let g:airline_variable_referenced_in_statusline = 'foo'
    endif
  endfunction
  call airline#add_statusline_func('MyPlugin')
<
Notice that only the left side of the statusline is overwritten. This means
the right side (the line/column numbers, etc) will be intact.

-------------------------------------               *remove_statusline_func*
You can also remove a function as well, which is useful for when you want a
temporary override. >
  call airline#remove_statusline_func('MyPlugin')
<

==============================================================================
PIPELINE                                                  *airline-pipeline*

Sometimes you want to do more than just use overrides.  The statusline funcref
is invoked and passed two arguments.  The first of these arguments is the
statusline builder.  You can use this to build completely custom statuslines
to your liking.  Here is an example: >
>
  function! MyPlugin(...)
    " first variable is the statusline builder
    let builder = a:1

    " WARNING: the API for the builder is not finalized and may change
    call builder.add_section('Normal', '%f')
    call builder.add_section('WarningMsg', '%{getcwd()}')
    call builder.split()
    call builder.add_section('airline_z', '%p%%')

    " tell the core to use the contents of the builder
    return 1
  endfunction
<
The above example uses various example highlight groups to demonstrate
that you can use any combination from the loaded colorscheme. However, if
you want colors to change between modes, you should use one of the section
highlight groups, e.g. `airline_a` and `airline_b`.

The second variable is the context, which is a dictionary containing various
values such as whether the statusline is active or not, and the window number.
>
  context = {
    'winnr': 'the window number for the statusline',
    'active': 'whether the window is active or not',
    'bufnr': 'the current buffer for this window',
  }
<
-------------------------------------        *airline-pipeline-return-codes*
The pipeline accepts various return codes and can be used to determine the
next action.  The following are the supported codes: >
   0   the default, continue on with the next funcref
  -1   do not modify the statusline
   1   modify the statusline with the current contents of the builder
<
Note: Any value other than 0 will halt the pipeline and prevent the next
funcref from executing.

==============================================================================
WRITING EXTENSIONS                              *airline-writing-extensions*

For contributions into the plugin, here are the following guidelines:

1.  For simple 'filetype' checks, they can be added directly into the
`extensions.vim` file.

2.  Pretty much everything else should live as a separate file under the
`extensions/` directory.

  a.  Inside `extensions.vim`, add a check for some variable or command that
      is always available (these must be defined in `plugin/`, and _not_
      `autoload/` of the other plugin).  If it exists, then initialize the
      extension. This ensures that the extension is loaded if and only if the
      user has the other plugin installed.  Also, a check to
      `airline#extensions#foo_plugin#enabled` should be performed to allow the
      user to disable it.

  b.  Configuration variables for the extension should reside in the
      extension, e.g. `g:airline#extensions#foo_plugin#bar_variable`.

See the source of |example.vim| for documented code of how to write one.
Looking at the other extensions is also a good resource.

==============================================================================
WRITING THEMES                                              *airline-themes*

Themes are written "close to the metal" -- you will need to know some basic
VimL syntax to write a theme, but if you've written in any programming
language before it will be easy to pick up.

The |dark.vim| theme fully documents this procedure and will guide you through
the process.

For other examples, you can visit the official themes repository at
<https://github.com/vim-airline/vim-airline-themes>.  It also includes
examples such as |jellybeans.vim| which define colors by extracting highlight
groups from the underlying colorscheme.

==============================================================================
TROUBLESHOOTING                                    *airline-troubleshooting*

Q. There are no colors.
A. You need to set up your terminal correctly.  For more details, see
   <http://vim.wikia.com/wiki/256_colors_in_vim>.  Alternatively, if you want
   to bypass the automatic detection of terminal colors, you can force Vim
   into 256 color mode with this: >
  set t_Co=256
<
Q. The statusline does not appear until I create a split.
A. This is the default setting of 'laststatus'.  If you want it to appear all
   the time, add the following to your vimrc: >
  set laststatus=2
<
Q. Powerline symbols are not showing up.
A. First, you must install patched powerline fonts. Second, you must enable
   unicode in vim.  >
  set encoding=utf-8
<
Q. There is a pause when leaving insert mode.
A. Add the following to your vimrc.  >
  set ttimeoutlen=50
<
Q. The colors look a little off for some themes.
A. Certain themes are derived from the active colorscheme by extracting colors
   from predefined highlight groups.  These airline themes will look good for
   their intended matching colorschemes, but will be hit or miss when loaded
   with other colorschemes.

Q. Themes are missing
A. Themes have been extracted into the vim-airlines-themes repository. Simply
   clone https://github.com/vim-airline/vim-airline-themes and everything
   should work again.


Solutions to other common problems can be found in the Wiki:
<https://github.com/vim-airline/vim-airline/wiki/FAQ>

==============================================================================
CONTRIBUTIONS                                        *airline-contributions*

Contributions and pull requests are welcome.

==============================================================================
LICENSE                                                    *airline-license*

MIT License.  Copyright © 2013-2016 Bailey Ling.

 vim:tw=78:ts=8:ft=help:norl:
