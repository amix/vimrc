snippet lib
	library ${1};
	${0}
snippet im
	import 'package:${1}/${2}.dart';
	${0}
snippet rgx
	new RegExp(r'${1}')
snippet var
	var ${1} = ${2};
snippet main
	main() {
	  ${0}
	}
snippet st
	static ${0}
snippet fi
	final ${0}
snippet re
	return ${0}
snippet br
	break;
snippet th
	throw ${0}
snippet cl
	class ${1:`vim_snippets#Filename("", "untitled")`} ${0}
snippet in
	interface ${1:`vim_snippets#Filename("", "untitled")`} ${0}
snippet imp
	implements ${0}
snippet ext
	extends ${0}
snippet if
	if (${1:true}) {
	  ${0}
	}
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${0}
	}
snippet el
	else
snippet sw
	switch (${1}) {
	  ${0}
	}
snippet cs
	case ${1}:
	  ${0}
snippet de
	default:
	  ${0}
snippet for
	for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {
	  ${0:$1[$2]}
	}
snippet fore
	for (final ${2:item} in ${1:itemList}) {
	  ${0}
	}
snippet wh
	while (${1:/* condition */}) {
	  ${0}
	}
snippet dowh
	do {
	  ${0}
	} while (${0:/* condition */});
snippet as
	assert(${0:/* condition */});
snippet try
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	}
snippet tryf
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	} finally {
	}
